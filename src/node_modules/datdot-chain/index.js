const { ApiPromise, WsProvider, Keyring, ApiRx } = require("@polkadot/api")
const signer = require('./signer')
const provider = new WsProvider('ws://127.0.0.1:9944')
const { randomAsU8a } = require('@polkadot/util-crypto') // make sure version matches api version
const types = JSON.parse(fs.readFileSync('./types.json').toString())
const API = await ApiPromise.create({
  provider,
  types
})

module.exports = datdotChain()

function datdotChain () {

  const chainAPI = {
    makeAccount,
    requestHosting,
    onHosting,
    offerEncoding,
    onHosting,
    offHosting,
    commit
  }
  return chainAPI

  function makeAccount () {
    const keyring = new Keyring({ type: 'sr25519' })
    const account = keyring.addFromSeed(randomAsU8a(32))
    // const account = keyring.addFromUri('//Alice')
    return accountId
  }

  function requestHosting (opts, signature) {
    const accountId = signer.verify(signature, opts)
    if (!accountId) throw new Error('invalid signature')
    const registerData = api.tx.datVerify.registerData(archiveArr)
    await registerData.signAndSend(accountId, async ({ events = [], status }) => {
      // console.log(`Registering data: `, status.type)
      if (status.isFinalized) {
        // events.forEach(({ phase, event: { data, method, section } }) => {
        //   console.log('\t', phase.toString(), `: ${section}.${method}`, data.toString());
        // });
    })
  }

  function offerEncoding (accountId, handleEncoding) {
    const registerSeeder = api.tx.datVerify.registerSeeder()
    await registerSeeder.signAndSend(accountId, ({ events = [], status }) => {
      console.log(`Registering user: `, status.type)
      if (status.isFinalized) {
        events.forEach(({ phase, event: { data, method, section } }) => {
          console.log('\t', phase.toString(), `: ${section}.${method}`, data.toString());
        });
      }
    })
  }
  function onHosting () {
    api.query.system.events((events) => {
      events.forEach((record) => {
        const event = record.event
        if (event.method === 'SomethingStored') {
            console.log(`${event.data.toString()}`)
            return(event.data)
        }
      })
    })
  }
  function offHosting () {}
  function commit (event, merkleRootE) {}
}
